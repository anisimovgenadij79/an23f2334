import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from GUI2_1 import Ui_Dialog
import requests
from bs4 import BeautifulSoup as BS
import re
import codecs
import lxml.html as xm
from lxml import etree
import sqlite3
import datetime

# Create application
app = QtWidgets.QApplication(sys.argv)

# Create form and init UI
Dialog = QtWidgets.QDialog()
ui = Ui_Dialog()
ui.setupUi(Dialog)
Dialog.show()

# Hook logic

def read_base():

	# test = ui.comboBoxRetushers.currentText()
	# test_date1 = ui.dateEditForStat1.date()
	# test_date1_norm = test_date1.toPyDate()
	# ui.label_work_base.setText(f'Дата: {test_date1_norm} \nДата: {test_date1_norm}')

	date1 = ui.dateEditForStat1.date()
	date1_norm = date1.toPyDate()
	date1_norm = str(date1_norm)
	date2 = ui.dateEditForStat2.date()
	date2_norm = date2.toPyDate()
	y2 = date2_norm.year
	y2 = int(y2)
	date2_norm = str(date2_norm)
	a_inp = date1_norm
	b_inp = date2_norm
	a = a_inp.split('-')
	b = b_inp.split('-')
	aa = datetime.date(int(a[0]),int(a[1]),int(a[2]))
	bb = datetime.date(int(b[0]),int(b[1]),int(b[2]))
	cc = bb-aa
	dd = str(cc)
	dd = dd.split()[0]
	if dd == "0:00:00" :
		dd = 1   # Всего дней за указанный промежуток времени	
	
	else:
		dd = int(dd)+1

	a_inp = "'"+str(a_inp)+"'"
	b_inp = "'"+str(b_inp)+"'"

	nik_inp = ui.comboBoxRetushers.currentText()
	nik_inp_chuzh = "'"+str(nik_inp)+"Чужая'"
	nik_inp = "'"+str(nik_inp)+"'"
	



	conn = sqlite3.connect("BASE_ZAKAZS.db")

	sql = "CREATE TABLE zakazs(num INTEGER UNIQUE, name TEXT, zkzchik TEXT, price INTEGER, ret TEXT, stats TEXT, date_zak TEXT, date_otp TEXT)"
	sql = "SELECT * FROM zakazs WHERE ret = %s AND DATE (date_otp) BETWEEN (%s) AND (%s)" %(nik_inp,a_inp,b_inp)
	sql_sum= "SELECT SUM(price) FROM zakazs WHERE ret = %s AND DATE (date_otp) BETWEEN (%s) AND (%s)" %(nik_inp,a_inp,b_inp)
	sql_sum_chuzh= "SELECT SUM(price) FROM zakazs WHERE ret = %s AND DATE (date_otp) BETWEEN (%s) AND (%s)" %(nik_inp_chuzh,a_inp,b_inp)
	extreme = "SELECT * FROM zakazs WHERE stats LIKE '%%Экстрим%%' AND ret = %s AND DATE (date_otp) BETWEEN (%s) AND (%s)" %(nik_inp,a_inp,b_inp)
	srochniy = "SELECT * FROM zakazs WHERE stats LIKE '%%Срочный%%' AND ret = %s AND DATE (date_otp) BETWEEN (%s) AND (%s)" %(nik_inp,a_inp,b_inp)
	Bez_pret = "SELECT * FROM zakazs WHERE stats LIKE '%%Безпретензий%%' AND ret = %s AND DATE (date_otp) BETWEEN (%s) AND (%s)" %(nik_inp,a_inp,b_inp)
	Optim = "SELECT * FROM zakazs WHERE stats LIKE '%%Оптимальный%%' AND ret = %s AND DATE (date_otp) BETWEEN (%s) AND (%s)" %(nik_inp,a_inp,b_inp)
	Ob = "SELECT * FROM zakazs WHERE stats LIKE '%%Обычный%%' AND ret = %s AND DATE (date_otp) BETWEEN (%s) AND (%s)" %(nik_inp,a_inp,b_inp)
	pravka = "SELECT * FROM zakazs WHERE stats LIKE '%%Правкаэскиза%%' AND ret = %s AND DATE (date_otp) BETWEEN (%s) AND (%s)" %(nik_inp,a_inp,b_inp)
	pravka_chuzh = "SELECT * FROM zakazs WHERE stats LIKE '%%Правкаэскиза%%' AND ret = %s AND DATE (date_otp) BETWEEN (%s) AND (%s)" %(nik_inp_chuzh,a_inp,b_inp)
	cursor = conn.cursor()

	cursor.execute(extreme)
	extreme_res = cursor.fetchall()
	extreme_fin = str(len(extreme_res))

	cursor.execute(srochniy)
	srochniy_res = cursor.fetchall()
	srochniy_fin = str(len(srochniy_res))

	cursor.execute(Bez_pret)
	Bez_pret_res = cursor.fetchall()
	Bez_pret_fin = str(len(Bez_pret_res))

	cursor.execute(Optim)
	Optim_res = cursor.fetchall()
	Optim_fin = str(len(Optim_res))

	cursor.execute(Ob)
	Ob_res = cursor.fetchall()
	Ob_fin = str(len(Ob_res))

	cursor.execute(pravka)
	pravka_res = cursor.fetchall()
	pravka_fin_1 = str(len(pravka_res))
	
	cursor.execute(pravka_chuzh)
	pravka_chuzh_res = cursor.fetchall()
	pravka_chuzh_fin = str(len(pravka_chuzh_res))

	pravka_fin = int(pravka_fin_1) + int(pravka_chuzh_fin)


	cursor.execute(sql)
	res = cursor.fetchall()

	cursor.execute(sql_sum)
	res_sum = cursor.fetchall()      
	new_re_sum =[]
	for element in res_sum:
		new_re_sum.append(element[0])
	res_sum = new_re_sum
	del(new_re_sum)	
	for s in res_sum:
		summ_b = s
		if summ_b == None:
			summ_b = 0						# Стоимость всех заказов в заданном промежутке

	cursor.execute(sql_sum_chuzh)
	res_sum_chuzh = cursor.fetchall()      
	new_re_sum_chuzh =[]
	for element_c in res_sum_chuzh:
		new_re_sum_chuzh.append(element_c[0])
	res_sum_chuzh = new_re_sum_chuzh
	del(new_re_sum_chuzh)	
	for s_chuzh in res_sum_chuzh:
		summ_chuzh = s_chuzh
		if summ_chuzh == None:
			summ_chuzh = 0	

	summ = int(summ_b) + int(summ_chuzh)			

	all_zak = str(len(res)) 				# Количество заказов, в указанный промежуток
	all_zak_i = int(all_zak) + int(pravka_chuzh_fin)
	sredn = all_zak_i / dd

	if nik_inp == "'Александр'":
		if 2021 <= y2:
			base_p = 0.5
		else:
			base_p = 0.4	
	elif nik_inp == "'Катя'":
		base_p = 0.5
	elif nik_inp == "'Ирина'":
		base_p = 0.5
	elif nik_inp == "'Иринка'":
		base_p = 0.5
	elif nik_inp == "'Мария'":
		base_p = 0.5
	elif nik_inp == "'Надежда'":
		base_p = 0.5	
	elif nik_inp == "'Наталия'":
		base_p = 0.5
	elif nik_inp == "'Роман'":
		base_p = 0.5
	elif nik_inp == "'Светлана'":
		base_p = 0.5	
	elif nik_inp == "'Сергей'":
		base_p = 0.5	
	else:
		base_p = 0.4
					
	if sredn <= 4:
		percent = base_p

	elif 4 < sredn <= 9:
		if 2020 <= y2:
			percent = base_p + 0.00	
		else:
			percent = base_p + 0	
	elif 9 < sredn <= 14:
		if 2020 <= y2:
			percent = base_p + 0.05	
		else:
			percent = base_p + 0.05	
	elif 14 < sredn <= 19:
		percent = base_p + 0.10
	elif 19 < sredn <= 999:
		if 2020 <= y2:
			percent = base_p + 0.15	
		else:
			percent = base_p + 0.10	

	zp = summ * percent

	if all_zak_i == 0:
		sredn_stoim_z = 0
		sredn_summ = 0
	else:
		sredn_stoim_z = (summ * percent)/all_zak_i
		sredn_summ = summ / all_zak_i

	all_zak_i = str(all_zak_i)	
	print('Выбранный период: '+a_inp+' - '+b_inp)
	print('Ретушер: '+nik_inp)

	print("Всего заказов за данный промежуток времени: "+all_zak_i)

	dd = str(dd)                                                              # print(dd.split()[0]) # only days
	print("Всего дней: "+dd) 
	sredn = str(sredn)
	print("Средняя: "+sredn)
	percent = str(percent)
	print("Процент: "+percent)
	summ = str(summ)
	print('Итого сумма на которую выполнены заказы: '+summ)
	zp = str(zp)
	print('Итого з/п: '+zp)
	sredn_summ = str(sredn_summ)
	print('Средняя стоимость одного заказа: '+sredn_summ)
	sredn_stoim_z = str(sredn_stoim_z)
	print('Средняя стоимость одного заказа по базовому %: '+sredn_stoim_z)
	extreme_fin = str(extreme_fin)
	print('Экстримов: '+extreme_fin)
	srochniy_fin = str(srochniy_fin)
	print('Срочных: '+srochniy_fin)
	Bez_pret_fin = str(Bez_pret_fin)
	print('Без претензий: '+Bez_pret_fin)
	Optim_fin = str(Optim_fin)
	print('Оптимальных: '+Optim_fin)
	Ob_fin = str(Ob_fin)
	print('Обычных: '+Ob_fin)
	pravka_fin = str(pravka_fin)
	print('Правок: '+pravka_fin)
	pravka_chuzh_fin = str(pravka_chuzh_fin)
	print('Правок Чуж: '+pravka_chuzh_fin)
	

	bbbb = ui.textEdit_2.insertPlainText(f'С: {date1_norm} По: {date2_norm} \nРетушер: {nik_inp} \nВсего дней: {dd} \nЗаказов сделано: {all_zak_i} \nСредняя: {sredn}  \nПроцент: {percent} \nИтого сумма на которую выполнены заказы: {summ} \nИтого з/п: {zp} \nСредняя стоимость одного заказа: {sredn_summ} \nСредняя з/п с 1 заказа: {sredn_stoim_z} \nЭкстримов: {extreme_fin} \nСрочных: {srochniy_fin} \nБез претензий: {Bez_pret_fin} \nОптимальных: {Optim_fin} \nОбычных: {Ob_fin} \nПравок: {pravka_fin} \n \n')

	conn.close()

def ref1_base():
	s = requests.session()

	from_date1 = ui.dateEditForRef1.date()
	from_date = from_date1.toPyDate()
	from_date = str(from_date)
	from_date = from_date.split('-')
	from_date = str(from_date[2]) +'/'+str(from_date[1]) +'/'+ str(from_date[0])

	to_date1 = ui.dateEditForRef2.date()
	to_date = to_date1.toPyDate()
	to_date = str(to_date)
	to_date = to_date.split('-')
	to_date = str(to_date[2]) +'/'+str(to_date[1]) +'/'+ str(to_date[0])

	payload = {
	    'statusRadioFiltrGo': '1',
	    'statusRadioFiltr' : 'all',
	    'fromDate' : from_date,
	    'toDate' : to_date
	}
	answ = s.post('https://obeliski.ru/ycore?module=retouch&mode=retouchListGet&ajax=exit&my_uid_filters=0' , data = payload)
	anw_bs = BS(answ.content, 'html.parser')

	for el in anw_bs.select('.rowTableResp'):
	    
	    num = el.select('.numZakaz') 
	    num = num[0].text
	    num = num.strip()
	               
	    url = "https://obeliski.ru/ycore?module=retouch&mode=getZakazRetouch&ajax=exit&id="+str(num)
	    zakaz_page = requests.get(url)

	    zakaz_page_bs = BS(zakaz_page.content, 'lxml')
	    regexp = r'\d{4}-\d{2}-\d{2} \(\d{2}\:\d{2}\:\d{2}\)'

	    sts = zakaz_page_bs.select('.idOsobennostiTMP')
	    for status in sts:
	        status = status.find_all('option', selected = 'selected')
	        for stats in status:
	            stats = "".join(stats.text.split())
	            stats = str(stats)

	    date_zak = zakaz_page_bs.find('div', class_='dataZakazData')                       #2020-03-31 (11:15:38)
	    date_zak = str(date_zak)
	    if len(date_zak) > 5:
	        date_zak = zakaz_page_bs.find('div', class_='dataZakazData').next_element

	        date_zak = re.search(regexp, date_zak)
	        date_zak = date_zak.group(0)
	        date_zak = date_zak.replace('(','').replace(')','')
	    else:
	        date_zak = 'пустота'

	    date_otp = zakaz_page_bs.find('strong', text=re.compile('Заказ завершен'))
	    date_otp = str(date_otp)
	    if len(date_otp) > 5:
	        date_otp = zakaz_page_bs.find('strong', text=re.compile('Заказ завершен')).next_element.next_element
	        date_otp = date_otp.strip()   
	    else: 
	        date_otp = 'Не готов'
	    arr = []
	    name = el.select('.name_zakaz')
	    name = name[0].text
	    name = name.strip()
	    zkzchik = el.select('.loginName')
	    zkzchik = zkzchik[0].text
	    zkzchik = zkzchik.strip()
	    price = el.select('.summZakaz')
	    price = price[0].text
	    price = price.strip()
	    price = price.replace('- ','')
	    # user = el.select('.loginRetusher > div')
	    # for ret in user:
	        # ret = ret.attrs['title']
	    for_r = zakaz_page_bs.find('div', class_="dataZakazData")
	    if for_r == None:
	    	for_r = 0
	    else:
	    	for_r = zakaz_page_bs.find('div', class_="dataZakazData").next_element
	    	for_r = for_r.split()[1]	

	    who = zakaz_page_bs.find('div', class_="dataZakazData")	
	    if who == None:
	    	who = for_r
	    else:
	    	who = who.get_text(strip = True)
	    	m = re.search('Ретушер: (\w+)\s*', who)
	    	if m:
	    		executor = m.group(1)
	    		who = str(executor)
	    		ret = who

	    		arr.append((num,zkzchik,name,price,ret,stats,date_zak,date_otp))
	    		conn = sqlite3.connect("BASE_ZAKAZS.db")
	    		cursor = conn.cursor()
	    		cursor.executemany("REPLACE INTO zakazs (num,zkzchik,name,price,ret,stats,date_zak,date_otp) VALUES (?,?,?,?,?,?,?,?)", arr)
	    		conn.commit()
	    		conn.close()    
	    for ar in arr:
	    	ui.textEdit.insertPlainText(f'{ar}\n')
	    for ar in arr:
	    	print(ar)	
	        

def ref2_base():
	s = requests.session()

	day_ref = ui.lineEdit.text()
	day_ref = int(day_ref)


	date_now1 = datetime.date.today()
	date_last = date_now1 + datetime.timedelta(days=-day_ref)                                # N дней с текущей даты. Статичное обновление
	date_last = str(date_last)
	date_last = date_last.split('-')
	date_last =str(date_last[2]) +'/'+ str(date_last[1]) +'/'+  str(date_last[0])   
	from_date = str(date_last)

	date_now = str(date_now1)
	date_now = date_now.split('-')
	date_now = str(date_now[2]) +'/'+ str(date_now[1]) +'/'+  str(date_now[0])
	to_date = str(date_now)

	payload = {
	    'statusRadioFiltrGo': '1',
	    'statusRadioFiltr' : 'all',
	    'fromDate' : from_date,
	    'toDate' : to_date
	}
	answ = s.post('https://obeliski.ru/ycore?module=retouch&mode=retouchListGet&ajax=exit&my_uid_filters=0' , data = payload)
	anw_bs = BS(answ.content, 'html.parser')


	for el in anw_bs.select('.rowTableResp'):
	    
	    num = el.select('.numZakaz') 
	    num = num[0].text
	    num = num.strip()
	               
	    url = "https://obeliski.ru/ycore?module=retouch&mode=getZakazRetouch&ajax=exit&id="+str(num)
	    zakaz_page = requests.get(url)

	    zakaz_page_bs = BS(zakaz_page.content, 'lxml')
	    regexp = r'\d{4}-\d{2}-\d{2} \(\d{2}\:\d{2}\:\d{2}\)'

	    sts = zakaz_page_bs.select('.idOsobennostiTMP')
	    for status in sts:
	        status = status.find_all('option', selected = 'selected')
	        for stats in status:
	            stats = "".join(stats.text.split())
	            stats = str(stats)

	    date_zak = zakaz_page_bs.find('div', class_='dataZakazData')                       #2020-03-31 (11:15:38)
	    date_zak = str(date_zak)
	    if len(date_zak) > 5:
	        date_zak = zakaz_page_bs.find('div', class_='dataZakazData').next_element

	        date_zak = re.search(regexp, date_zak)
	        date_zak = date_zak.group(0)
	        date_zak = date_zak.replace('(','').replace(')','')
	    else:
	        date_zak = 'пустота'

	    date_otp = zakaz_page_bs.find('strong', text=re.compile('Заказ завершен'))
	    date_otp = str(date_otp)
	    if len(date_otp) > 5:
	        date_otp = zakaz_page_bs.find('strong', text=re.compile('Заказ завершен')).next_element.next_element
	        date_otp = date_otp.strip()   
	    else: 
	        date_otp = 'Не готов'
	    arr = []
	    name = el.select('.name_zakaz')
	    name = name[0].text
	    name = name.strip()
	    zkzchik = el.select('.loginName')
	    zkzchik = zkzchik[0].text
	    zkzchik = zkzchik.strip()
	    price = el.select('.summZakaz')
	    price = price[0].text
	    price = price.strip()
	    price = price.replace('- ','')
	    # user = el.select('.loginRetusher > div')
	    # for ret in user:
	    #     ret = ret.attrs['title']
	    for_r = zakaz_page_bs.find('div', class_="dataZakazData")
	    if for_r == None:
	    	for_r = 0
	    else:
	    	for_r = zakaz_page_bs.find('div', class_="dataZakazData").next_element
	    	for_r = for_r.split()[1]	

	    who = zakaz_page_bs.find('div', class_="dataZakazData")	
	    if who == None:
	    	who = for_r
	    else:
	    	who = who.get_text(strip = True)
	    	m = re.search('Ретушер: (\w+)\s*', who)
	    	if m:
	    		executor = m.group(1)
	    		who = str(executor)
	    		ret = who

	    		arr.append((num,zkzchik,name,price,ret,stats,date_zak,date_otp))
	    		conn = sqlite3.connect("BASE_ZAKAZS.db")
	    		cursor = conn.cursor()
	    		cursor.executemany("REPLACE INTO zakazs (num,zkzchik,name,price,ret,stats,date_zak,date_otp) VALUES (?,?,?,?,?,?,?,?)", arr)
	    		conn.commit()
	    		conn.close()    
	    for ar in arr:
	    	ui.textEdit.insertPlainText(f'{ar}\n')
	    for ar in arr:
	    	print(ar)
	        

ui.pushButtonPrintStat.clicked.connect(read_base)
ui.pushButtonRefBase_1.clicked.connect(ref1_base)
ui.pushButtonRefBase_2.clicked.connect(ref2_base)

# Run main loop
sys.exit(app.exec_())    
    
    
    
